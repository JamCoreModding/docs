{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>JamCore is a small team of Minecraft modders working on a variety of mods for Fabric, Forge, Neoforge, and Quilt.</p> <p>This wiki contains information on our mods for both users and developers, where applicable. If you are confused about anything, please ask on Discord using the link in the page footer.</p> <p> </p>"},{"location":"supported-versions/","title":"Supported Versions","text":"<ul> <li>\u274c: No support at all - versions may exist for this Minecraft version, but   they will not be updated.</li> <li>\ud83d\udca4: New updates won't be backported, but issues may be fixed.</li> <li>\u2705: Full active support. New updates will come to this version.</li> <li>\ud83d\udea7: In progress or planned.</li> </ul> <p>With the exception of Utility Belt, critical issues might still be fixed on unsupported versions - this applies to my more popular mods. Please report the issue on GitHub, but do not be surprised if it is closed.</p> Mod 1.20.1 1.20.2 1.20.4 1.20.6 1.21/1.21.1 1.21.2/1.21.3 1.21.4 1.21.5 1.21.6/1.21.7/1.21.8 1.21.9/1.21.10 JamLib \u2705 \ud83d\udca4 \ud83d\udca4 \ud83d\udca4 \u2705 \ud83d\udca4 \u2705 \u2705 \u2705 \u2705 RightClickHarvest \u2705 \ud83d\udca4 \ud83d\udca4 \ud83d\udca4 \u2705 \ud83d\udca4 \u2705 \u2705 \u2705 \u2705 Utility Belt \u274c \u274c \ud83d\udca4 \ud83d\udca4 \u2705 \u274c*1 \u2705 \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 Shut Up GL Error \u2705 \ud83d\udca4 \u274c \u274c \u2705 \u274c \u2705 \u2705 \u2705 \ud83d\udea7 Reaping \ud83d\udea7 \u274c \ud83d\udca4 \ud83d\udca4 \u2705 \u274c \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 Wake Up Time \ud83d\udea7 \u274c \ud83d\udca4 \ud83d\udca4 \u2705 \u274c \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 You May Rest Now \ud83d\udea7 \u274c \ud83d\udca4 \ud83d\udca4 \u2705 \u274c \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 Quicker Connect Button \ud83d\udea7 \u274c \ud83d\udca4 \ud83d\udca4 \u2705 \u274c \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 \ud83d\udea7 Sort It Out! \u2705 \u274c \u274c \u274c \u2705 \ud83d\udca4 \u2705 \u2705 \u2705 \u2705 <ul> <li>*1: Accessories does not support this version, so Utility Belt is unavailable for it.</li> </ul> <p>Any mods not listed in this table are likely discontinued. If unsure, feel free to reach out via Discord.</p>"},{"location":"jamlib/config-api/","title":"Config API","text":"<p>JamLib comes with an easy to use config API that:</p> <ul> <li>Uses JSON5 - comments are added to the config file with descriptions, and user   defined comments are preserved between saves thanks to   Jankson.</li> <li>Automatically creates and registers (with ModMenu and Forge's config screen   API) config screens which can also validate their inputs and prevent users   from leaving if the config is invalid.</li> <li>Is easy to use.</li> </ul> <p> A JamLib Config Screen. The book button in the top left opens the config file in the users default text editor, while the buttons in the top right link to important websites related to the mod.</p> A JamLib JSON5 config file<pre><code>{\n  // - default: true (1)\n  \"requireHoe\": true,\n  // - default: true\n  \"harvestInRadius\": true,\n  /* - default: NORMAL\n       - must be one of: NONE, LOW, NORMAL, HIGH (2)\n    */\n  \"hungerLevel\": \"NORMAL\"\n}\n</code></pre> <ol> <li>All of the comments here are automatically generated by JamLib.</li> <li>This is an enum field.</li> </ol>"},{"location":"jamlib/config-api/#getting-started","title":"Getting Started","text":"<p>Once JamLib is added to your project, making a config is easy.</p> Your Config Class<pre><code>public class Config {\n    public boolean requireHoe = false; // (1)\n    public int rollTimes = 3; // (2)\n    public List&lt;Integer&gt; listOfInts = new ArrayList&lt;&gt;(List.of(1, 2, 3)); // (3)\n}\n</code></pre> <ol> <li>Config fields should be <code>public</code>, not <code>static</code>, and not <code>final</code>.</li> <li>The default value for this field is <code>3</code>. This will be used when making a new    config or when this field is added to an old config.</li> <li>Lists are supported, but make sure that the default value is mutable - an <code>ArrayList</code> is a safe bet.</li> </ol> Your Mod Initializer<pre><code>public class YourModInit { // (1)\n    public static final ConfigManager&lt;Config&gt; CONFIG = new ConfigManager&lt;&gt;(MOD_ID, Config.class); // (2)\n\n    public static void configExample() { // (3)\n        System.out.println(\"Requires hoe: \" + CONFIG.get().requireHoe); // (4)\n        CONFIG.get().rollTimes = 4; // (5)\n        CONFIG.save();\n    }\n}\n</code></pre> <ol> <li>The name and location of this class depends on your chosen mod loader. In    Architectury, configs can be initialized in the common subproject.</li> <li>The <code>ConfigManager</code> is responsible for saving and loading your config. When    you create a manager, config screens are automatically registered using    ModMenu (on Fabric and Quilt), and Forge's config screen API (on Forge).</li> <li>You can access the config any time after the static initialization of your    mod initializer.</li> <li>NEVER store the result of <code>ConfigManager#get()</code>, as your stored value will    not update when the config updates.</li> <li>You can also programmatically update the config, just remember to call    <code>ConfigManager#save()</code> soon afterwards.</li> </ol> <p>You'll also need to add translation keys to your language files:</p> en_us.json<pre><code>{\n    // the rest of your language file\n  \"config.testmod.testmod.title\": \"First config\", // (1)\n  \"config.testmod.second_config.title\": \"Second config\", // (2)\n  \"config.testmod.second_config.tooltip\": \"Tooltip for the second config on the selection screen\", // (3)\n  \"config.testmod.testmod.testBoolean\": \"Test boolean\", // (4)\n  \"config.testmod.testmod.testBoolean.tooltip\": \"Tooltip for the test config boolean\",\n  \"config.testmod.testmod.testEnum.first\": \"First\", // (5)\n    \"config.testmod.testmod.testEnum.second\": \"Second\"\n}\n</code></pre> <ol> <li>If you only have one config file (as described above), the key is in the form <code>config.mod_id.mod_id.title</code>. The title defaults to the mods name, as provided by the mod loader.</li> <li>If you have multiple configs, as described below, the key is in the form <code>config.mod_id.config_name.title</code>.</li> <li>This tooltip is shown on the config selection screen if you have multiple configs.</li> <li>Field keys are in the form <code>config.mod_id.config_name.field_name</code>.</li> <li>Enum variants can be translated too, using their lowercase name.</li> </ol>"},{"location":"jamlib/config-api/#more-advanced-usage","title":"More Advanced Usage","text":""},{"location":"jamlib/config-api/#built-in-annotations","title":"Built-in Annotations","text":"<p>JamLib comes with a few built-in annotations to enhance your configs.</p>"},{"location":"jamlib/config-api/#warning-the-user-that-a-restart-will-be-required","title":"Warning the User That a Restart Will Be Required","text":"<p>Annotating a field with <code>@RestartRequired</code> will warn the user that a restart is required for the change to take effect when they exit the config screen.</p> Your Config Class<pre><code>@RequiresRestart\npublic String requiresARestart = \"hello\";\n</code></pre> <p> This warning is shown when a user edits the config field in the config screen.</p>"},{"location":"jamlib/config-api/#requiring-a-string-to-match-a-regular-expression","title":"Requiring a String to Match a Regular Expression","text":"<p>Annotating a <code>String</code> field with <code>@MatchesRegex</code> will require that it matches the regular expression before the user can exit the config screen.</p> Your Config Class<pre><code>@MatchesRegex(\"^((25[0-5]|(2[0-4]|1\\\\d|[1-9]|)\\\\d)\\\\.?\\\\b){4}$\")\npublic String ip = \"...\";\n</code></pre> <p> This error is shown when a user inputs an invalid value in the config screen.</p>"},{"location":"jamlib/config-api/#requiring-a-number-to-be-within-a-range","title":"Requiring a Number to Be Within a Range","text":"<p>Annotating a number field (<code>float</code>, <code>double</code>, <code>int</code>, or <code>long</code>) with <code>@WithinRange</code> will require that it is within the specified range before the user can exit the config screen.</p> Your Config Class<pre><code>@WithinRange(min = 0, max = 10)\npublic float floatyValue = 3.2F;\n</code></pre> <p> This error is shown when a user inputs an invalid value in the config screen.</p>"},{"location":"jamlib/config-api/#using-a-slider-instead-of-a-text-field-for-numbers","title":"Using a Slider Instead of a Text Field for Numbers","text":"<p>Annotating a number field (<code>float</code>, <code>double</code>, <code>int</code>, or <code>long</code>) with <code>@Slider</code> will make the config screen add a slider instead of a text field. The field should also be annotated with <code>@WithinRange</code>.</p> Your Config Class<pre><code>@WithinRange(min = 0, max = 10)\n@Slider\npublic float floatyValue = 3.2F;\n</code></pre>"},{"location":"jamlib/config-api/#adding-comments-to-the-json-file","title":"Adding Comments to the JSON File","text":"<p>You can add a comment to a field in the serialized JSON using the <code>@Comment</code> annotation provided through the Jankson transitive dependency.</p> Your Config Class<pre><code>@WithinRange(min = 0, max = 10)\n@Slider\n@Comment(\"This value is used for ...\")\npublic float floatyValue = 3.2F;\n</code></pre>"},{"location":"jamlib/config-api/#hiding-a-config-entry-in-the-gui","title":"Hiding a Config Entry in the GUI","text":"<p>You can hide a config entry in the GUI using the <code>@HiddenInGui</code> annotation. This prevents it from showing in generated config screens, which may be helpful when trying to add a GUI entry using an unsupported type (e.g. lists or maps) which cannot be displayed yet.</p> Your Config Class<pre><code>@HiddenInGui\npublic List&lt;String&gt; evilListThatCannotBeDisplayedInAGui = List.of();\n</code></pre>"},{"location":"jamlib/config-api/#creating-multiple-configs","title":"Creating Multiple Configs","text":"<p>A mod can provide multiple configs to the config system, which will then create a screen to allow the user to select which one they would like to edit.</p> Your Mod Initializer<pre><code>public class YourModInit {\n    public static final ConfigManager&lt;ClientConfig&gt; CLIENT_CONFIG = new ConfigManager&lt;&gt;(MOD_ID, MOD_ID + \"_client\", ClientConfig.class); // (1)\n    public static final ConfigManager&lt;ServerConfig&gt; SERVER_CONFIG = new ConfigManager&lt;&gt;(MOD_ID, MOD_ID + \"_server\", ServerConfig.class); // (2)\n}\n</code></pre> <ol> <li>This config file will be saved at <code>config/MOD_ID_client.json5</code>.</li> <li>This is just an example, JamLib provides no specific methods to help you with    sided configs - it is your responsibility to make sure you are accessing    config values on the correct side.</li> </ol> <p> This screen is shown when there are multiple configs registered under one mod ID.</p>"},{"location":"jamlib/config-api/#adding-links","title":"Adding Links","text":"<p>You can add custom links to the top of your config screen if you wish.</p> Your Config Class<pre><code>public class Config implements ConfigExtensions&lt;Config&gt; { // (1)\n    // your config fields...\n\n    @Override\n    public List&lt;Link&gt; getLinks() {\n        return List.of( // (2)\n            new Link(Link.DISCORD, \"https://jamalam.tech/Discord\", Component.translatable(\"config.rightclickharvest.discord\")), // (3)\n            new Link(Link.GITHUB, \"https://github.com/JamCoreModding/quicker-connect-button\", Component.translatable(\"config.rightclickharvest.link.github\")),\n            new Link(Link.GENERIC_LINK, \"https://modrinth.com/mod/quicker-connect-button\", Component.translatable(\"config.rightclickharvest.link.modrinth\"))\n        );\n    }\n}\n</code></pre> <ol> <li>You'll need to implement the <code>ConfigExtensions</code> interface.</li> <li>It's best to not return too many links here, as they could overflow the    screen otherwise.</li> <li>JamLib provides <code>DISCORD</code>, <code>GITHUB</code>, and <code>GENERIC_LINK</code> textures. You will    need to create and provide 16x16 textures if you want any others.</li> </ol> <p></p>"},{"location":"jamlib/config-api/#custom-validation","title":"Custom Validation","text":"<p>You can also add a custom validation check that runs when the user is using the config screen to your config.</p> Your Config Class<pre><code>public class Config implements ConfigExtensions&lt;Config&gt; { // (1)\n    public int testInt = 3;\n\n    @Override\n    public List&lt;ValidationError&gt; getValidationErrors(ConfigManager&lt;TestConfig&gt; manager, FieldValidationInfo info) {\n        List&lt;ValidationError&gt; errors = ConfigExtensions.super.getValidationErrors(manager, info); // (2)\n\n        if (info.name().equals(\"testInt\") &amp;&amp; (Integer) info.value() == 4) {\n            errors.add(new ValidationError(ValidationError.Type.ERROR, info, Component.translatable(\"config.testmod.i_dont_like_4\"))); // (3)\n        }\n\n        return errors;\n    }\n}\n</code></pre> <ol> <li>You'll need to implement the <code>ConfigExtensions</code> interface.</li> <li>You need to call the default method, as it provides the checks for    annotations such as <code>@RequiresRestart</code> and <code>@WithinRange</code>.</li> <li><code>ValidationError.Type.WARNING</code> is also available. An error prevents the user    leaving the screen (without discarding their changes), while a warning just    warns them.</li> </ol> <p></p>"},{"location":"jamlib/getting-started/","title":"Getting Started","text":"<p>JamLib is a set of cross-platform APIs developed with Architectury that we use for all of our mods.</p> <p>You are also free to use JamLib in your projects, hence we have created this documentation on it.</p>"},{"location":"jamlib/getting-started/#features","title":"Features","text":"<ul> <li>JSON5 configuration with automatic config screens.</li> </ul>"},{"location":"jamlib/getting-started/#adding-jamlib-to-your-project","title":"Adding JamLib to Your Project","text":"ArchitecturyFabricNeoForge Using Gradle PropertiesUsing Version Catalogues gradle.properties<pre><code># rest of properties file ...\n# find this at https://github.com/JamCoreModding/jamlib/releases\njamlib_version=1.0.1\n</code></pre> build.gradle<pre><code>allprojects {\n    repositories {\n        // rest of repositories block...\n\n        maven {\n            name = \"Jamalam's Maven\"\n            url = \"https://maven.jamalam.tech/releases\"\n\n            content {\n                includeGroup \"io.github.jamalam360\"\n            }\n        }\n    }\n}\n</code></pre> common/build.gradle<pre><code>dependencies {\n    // rest of dependencies block...\n\n    modImplementation \"io.github.jamalam360:jamlib:${jamlib_version}\"\n}\n</code></pre> fabric/build.gradle<pre><code>dependencies {\n    // rest of dependencies block...\n\n    modImplementation \"io.github.jamalam360:jamlib-fabric:${jamlib_version}\"\n}\n</code></pre> neoforge/build.gradle<pre><code>dependencies {\n    // rest of dependencies block...\n\n    modImplementation \"io.github.jamalam360:jamlib-forge:${jamlib_version}\"\n    // Dependency of JamLib. Forge requires that we specify this\n    forgeRuntimeLibrary \"blue.endless:jankson:1.2.3\"\n}\n</code></pre> Version Catalogue<pre><code>[versions]\n# rest of versions...\n# find this at https://github.com/JamCoreModding/jamlib/releases\njamlib = \"1.0.1\"\n\n[libraries]\n# rest of libraries...\njamlib-common = { module = \"io.github.jamalam360:jamlib\", version.ref = \"jamlib\" }\njamlib-fabric = { module = \"io.github.jamalam360:jamlib-fabric\", version.ref = \"jamlib\" }\njamlib-neoforge = { module = \"io.github.jamalam360:jamlib-neoforge\", version.ref = \"jamlib\" }\n</code></pre> build.gradle<pre><code>allprojects {\n    repositories {\n        // rest of repositories block...\n\n        maven {\n            name = \"Jamalam's Maven\"\n            url = \"https://maven.jamalam.tech/releases\"\n\n            content {\n                includeGroup \"io.github.jamalam360\"\n            }\n        }\n    }\n}\n</code></pre> common/build.gradle<pre><code>dependencies {\n    // rest of dependencies block...\n\n    modImplementation libs.jamlib.common\n}\n</code></pre> fabric/build.gradle<pre><code>dependencies {\n    // rest of dependencies block...\n\n    modImplementation libs.jamlib.fabric\n}\n</code></pre> neoforge/build.gradle<pre><code>dependencies {\n    // rest of dependencies block...\n\n    modImplementation libs.jamlib.neoforge\n    // Dependency of JamLib. NF requires that we specify this\n    forgeRuntimeLibrary \"blue.endless:jankson:1.2.3\"\n}\n</code></pre> Using Gradle PropertiesUsing Version Catalogues gradle.properties<pre><code># rest of properties file ...\n# find this at https://github.com/JamCoreModding/jamlib/releases\njamlib_version=1.0.1\n</code></pre> build.gradle<pre><code>repositories {\n    // rest of repositories block...\n\n    maven {\n        name = \"Jamalam's Maven\"\n        url = \"https://maven.jamalam.tech/releases\"\n\n        content {\n            includeGroup \"io.github.jamalam360\"\n        }\n    }\n}\n\ndependencies {\n    // rest of dependencies block...\n\n    modImplementation \"io.github.jamalam360:jamlib-fabric:${jamlib_version}\"\n}\n</code></pre> Version Catalogue<pre><code>[versions]\n# rest of versions...\n# find this at https://github.com/JamCoreModding/jamlib/releases\njamlib = \"1.0.1\"\n\n[libraries]\n# rest of libraries...\njamlib = { module = \"io.github.jamalam360:jamlib-fabric\", version.ref = \"jamlib\" }\n</code></pre> build.gradle<pre><code>repositories {\n    // rest of repositories block...\n\n    maven {\n        name = \"Jamalam's Maven\"\n        url = \"https://maven.jamalam.tech/releases\"\n\n        content {\n            includeGroup \"io.github.jamalam360\"\n        }\n    }\n}\n\ndependencies {\n    // rest of dependencies block...\n\n    modImplementation libs.jamlib\n}\n</code></pre> Using Gradle PropertiesUsing Version Catalogues gradle.properties<pre><code># rest of properties file ...\n# find this at https://github.com/JamCoreModding/jamlib/releases\njamlib_version=1.0.1\n</code></pre> build.gradle<pre><code>repositories {\n    // rest of repositories block...\n\n    maven {\n        name = \"Jamalam's Maven\"\n        url = \"https://maven.jamalam.tech/releases\"\n\n        content {\n            includeGroup \"io.github.jamalam360\"\n        }\n    }\n}\n\ndependencies {\n    // rest of dependencies block...\n\n    implementation fg.deobf(\"io.github.jamalam360:jamlib-neoforge:${jamlib_version}\")\n    // Dependency of JamLib. NF requires that we specify this\n    forgeRuntimeLibrary \"blue.endless:jankson:1.2.3\"\n}\n</code></pre> Version Catalogue<pre><code>[versions]\n# rest of versions...\n# find this at https://github.com/JamCoreModding/jamlib/releases\njamlib = \"1.0.1\"\n\n[libraries]\n# rest of libraries...\njamlib = { module = \"io.github.jamalam360:jamlib-neoforge\", version.ref = \"jamlib\" }\n</code></pre> build.gradle<pre><code>repositories {\n    // rest of repositories block...\n\n    maven {\n        name = \"Jamalam's Maven\"\n        url = \"https://maven.jamalam.tech/releases\"\n\n        content {\n            includeGroup \"io.github.jamalam360\"\n        }\n    }\n}\n\ndependencies {\n    // rest of dependencies block...\n\n    implementation fg.deobf(libs.jamlib)\n    // Dependency of JamLib. NF requires that we specify this\n    forgeRuntimeLibrary \"blue.endless:jankson:1.2.3\"\n}\n</code></pre> <p>Once JamLib is successfully in your development environment, you can add a dependency on it to your mod metadata.</p> FabricNeoForge fabric.mod.json<pre><code>{\n    // rest of JSON\n    \"depends\": {\n        // rest of depends\n        \"jamlib\": \"&gt;=1.0.0\"\n    }\n}\n</code></pre> META-INF/neoforge.mods.toml<pre><code>[[dependencies.YOUR_MOD_ID]]\nmodId = \"jamlib\"\nmandatory = true\nversionRange = \"[1.0.0,)\"\nordering = \"AFTER\"\nside = \"BOTH\"\n</code></pre> <p>Refer to the sidebar for documentation on the available APIs within JamLib.</p>"},{"location":"jamlib/mod-reposts/","title":"Mod Reposts","text":"<p>JamLib comes with a simple checker that is able to determine if a mod file looks like it has been downloaded from a repost site.</p> <p>If you are using our template mod, this works out of the box. Otherwise, you will need to make sure your JAR has a <code>JamLib-File-Name</code> attribute in its manifest that contains the original file name of the JAR, including the <code>.jar</code> extension:</p> <pre><code>jar {\n  manifest {\n    attributes([\n      'JamLib-File-Name'      : \"my-cool-mod-${rootProject.version}.jar\", // (1)\n    ])\n  }\n}\n</code></pre> <ol> <li>Remember to replace <code>my-cool-mod</code> with your JAR name.</li> </ol> <p>You then need to call the method from your main mod initializer (in the common initializer, if you are using a multiloader toolchain):</p> <pre><code>JamLib.checkForJarRenaming(YourMainClass.class);\n</code></pre> <p>Everything else, including notifying the user, will be handled automatically.</p> <p>Sites such as 9minecraft are known to rename jars, so if a user is caught with one such jar they will be notified once per jar.</p>"},{"location":"right-click-harvest/about/","title":"Introduction","text":"<p>RightClickHarvest is a mod for Fabric, (Neo)Forge, and Quilt that allows harvesting a variety of crops with just a right click.</p> <p></p> <p></p> <ul> <li>Harvest your crops with ease.</li> <li>Harvest all vanilla crops, including cocoa beans and sugar cane.</li> <li>Harvest 99% of modded crops without configuration.</li> <li>Configure if a hoe is required and whether harvesting uses hunger points.</li> <li>Configure whether higher tier hoes harvest in a larger radius.</li> </ul>"},{"location":"right-click-harvest/api/","title":"API","text":"<p>RightClickHarvest provides a simple API currently composed of a single event.</p>"},{"location":"right-click-harvest/api/#adding-rightclickharvest-to-your-project","title":"Adding RightClickHarvest to Your Project","text":"ArchitecturyFabricQuiltForge Using Gradle PropertiesUsing Version Catalogues gradle.properties<pre><code># rest of properties file ...\n# find this at https://github.com/JamCoreModding/jamlib/releases\njamlib_version=1.0.1\n# find this at https://github.com/JamCoreModding/right-click-harvest/releases\nrightclickharvest_version=4.0.1\n</code></pre> build.gradle<pre><code>allprojects {\n    repositories {\n        // rest of repositories block...\n\n        maven {\n            name = \"Jamalam's Maven\"\n            url = \"https://maven.jamalam.tech/releases\"\n\n            content {\n                includeGroup \"io.github.jamalam360\"\n            }\n        }\n    }\n}\n</code></pre> common/build.gradle<pre><code>dependencies {\n    // rest of dependencies block...\n\n    modImplementation \"io.github.jamalam360:right-click-harvest:${rightclickharvest_version}\"\n    modRuntimeOnly \"io.github.jamalam360:jamlib:${jamlib_version}\"\n}\n</code></pre> fabric/build.gradle<pre><code>dependencies {\n    // rest of dependencies block...\n\n    modImplementation \"io.github.jamalam360:right-click-harvest-fabric:${rightclickharvest_version}\"\n    modRuntimeOnly \"io.github.jamalam360:jamlib-fabric:${jamlib_version}\"\n}\n</code></pre> forge/build.gradle<pre><code>dependencies {\n    // rest of dependencies block...\n\n    modImplementation \"io.github.jamalam360:right-click-harvest-forge:${rightclickharvest_version}\"\n    modRuntimeOnly \"io.github.jamalam360:jamlib-forge:${jamlib_version}\"\n    // Dependency of JamLib. Forge requires that we specify this\n    forgeRuntimeLibrary \"blue.endless:jankson:1.2.3\"\n}\n</code></pre> quilt/build.gradle<pre><code>dependencies {\n    // rest of dependencies block...\n\n    modImplementation \"io.github.jamalam360:right-click-harvest-quilt:${rightclickharvest_version}\"\n    modRuntimeOnly \"io.github.jamalam360:jamlib-quilt:${jamlib_version}\"\n}\n</code></pre> Version Catalogue<pre><code>[versions]\n# rest of versions...\n# find this at https://github.com/JamCoreModding/jamlib/releases\njamlib = \"1.0.1\"\n# find this at https://github.com/JamCoreModding/right-click-harvest/releases\nrightclickharvest = \"4.0.1\"\n\n[libraries]\n# rest of libraries...\njamlib-common = { module = \"io.github.jamalam360:jamlib\", version.ref = \"jamlib\" }\njamlib-fabric = { module = \"io.github.jamalam360:jamlib-fabric\", version.ref = \"jamlib\" }\njamlib-quilt = { module = \"io.github.jamalam360:jamlib-quilt\", version.ref = \"jamlib\" }\njamlib-forge = { module = \"io.github.jamalam360:jamlib-forge\", version.ref = \"jamlib\" }\nrightclickharvest-common = { module = \"io.github.jamalam360:right-click-harvest\", version.ref = \"rightclickharvest\" }\nrightclickharvest-fabric = { module = \"io.github.jamalam360:right-click-harvest-fabric\", version.ref = \"rightclickharvest\" }\nrightclickharvest-quilt = { module = \"io.github.jamalam360:right-click-harvest-quilt\", version.ref = \"rightclickharvest\" }\nrightclickharvest-forge = { module = \"io.github.jamalam360:right-click-harvest-forge\", version.ref = \"rightclickharvest\" }\n</code></pre> build.gradle<pre><code>allprojects {\n    repositories {\n        // rest of repositories block...\n\n        maven {\n            name = \"Jamalam's Maven\"\n            url = \"https://maven.jamalam.tech/releases\"\n\n            content {\n                includeGroup \"io.github.jamalam360\"\n            }\n        }\n    }\n}\n</code></pre> common/build.gradle<pre><code>dependencies {\n    // rest of dependencies block...\n\n    modImplementation libs.rightclickharvest.common\n    modRuntimeOnly libs.jamlib.common\n}\n</code></pre> fabric/build.gradle<pre><code>dependencies {\n    // rest of dependencies block...\n\n    modImplementation libs.rightclickharvest.fabric\n    modRuntimeOnly libs.jamlib.fabric\n}\n</code></pre> forge/build.gradle<pre><code>dependencies {\n    // rest of dependencies block...\n\n    modImplementation libs.rightclickharvest.forge\n    modRuntimeOnly libs.jamlib.forge\n    // Dependency of JamLib. Forge requires that we specify this\n    forgeRuntimeLibrary \"blue.endless:jankson:1.2.3\"\n}\n</code></pre> quilt/build.gradle<pre><code>dependencies {\n    // rest of dependencies block...\n\n    modImplementation libs.rightclickharvest.quilt\n    modRuntimeOnly libs.jamlib.quilt\n}\n</code></pre> Using Gradle PropertiesUsing Version Catalogues gradle.properties<pre><code># rest of properties file ...\n# find this at https://github.com/JamCoreModding/jamlib/releases\njamlib_version=1.0.1\n# find this at https://github.com/JamCoreModding/right-click-harvest/releases\nrightclickharvest_version=4.0.1\n</code></pre> build.gradle<pre><code>repositories {\n    // rest of repositories block...\n\n    maven {\n        name = \"Jamalam's Maven\"\n        url = \"https://maven.jamalam.tech/releases\"\n\n        content {\n            includeGroup \"io.github.jamalam360\"\n        }\n    }\n}\n\ndependencies {\n    // rest of dependencies block...\n\n    modImplementation \"io.github.jamalam360:right-click-harvest-fabric:${rightclickharvest_version}\"\n    modRuntimeOnly \"io.github.jamalam360:jamlib-fabric:${jamlib_version}\"\n}\n</code></pre> Version Catalogue<pre><code>[versions]\n# rest of versions...\n# find this at https://github.com/JamCoreModding/jamlib/releases\njamlib = \"1.0.1\"\n# find this at https://github.com/JamCoreModding/right-click-harvest/releases\nrightclickharvest = \"4.0.1\"\n\n[libraries]\n# rest of libraries...\njamlib = { module = \"io.github.jamalam360:jamlib-fabric\", version.ref = \"jamlib\" }\nrightclickharvest = { module = \"io.github.jamalam360:right-click-harvest-fabric\", version.ref = \"rightclickharvest\" }\n</code></pre> build.gradle<pre><code>repositories {\n    // rest of repositories block...\n\n    maven {\n        name = \"Jamalam's Maven\"\n        url = \"https://maven.jamalam.tech/releases\"\n\n        content {\n            includeGroup \"io.github.jamalam360\"\n        }\n    }\n}\n\ndependencies {\n    // rest of dependencies block...\n\n    modImplementation libs.rightclickharvest\n    modRuntimeOnly libs.jamlib\n}\n</code></pre> Using Gradle PropertiesUsing Version Catalogues gradle.properties<pre><code># rest of properties file ...\n# find this at https://github.com/JamCoreModding/jamlib/releases\njamlib_version=1.0.1\n# find this at https://github.com/JamCoreModding/right-click-harvest/releases\nrightclickharvest_version=4.0.1\n</code></pre> build.gradle<pre><code>repositories {\n    // rest of repositories block...\n\n    maven {\n        name = \"Jamalam's Maven\"\n        url = \"https://maven.jamalam.tech/releases\"\n\n        content {\n            includeGroup \"io.github.jamalam360\"\n        }\n    }\n}\n\ndependencies {\n    // rest of dependencies block...\n\n    modImplementation \"io.github.jamalam360:right-click-harvest-quilt:${rightclickharvest_version}\"\n    modRuntimeOnly \"io.github.jamalam360:jamlib-quilt:${jamlib_version}\"\n}\n</code></pre> Version Catalogue<pre><code>[versions]\n# rest of versions...\n# find this at https://github.com/JamCoreModding/jamlib/releases\njamlib = \"1.0.1\"\n# find this at https://github.com/JamCoreModding/right-click-harvest/releases\nrightclickharvest = \"4.0.1\"\n\n[libraries]\n# rest of libraries...\njamlib = { module = \"io.github.jamalam360:jamlib-quilt\", version.ref = \"jamlib\" }\nrightclickharvest = { module = \"io.github.jamalam360:right-click-harvest-quilt\", version.ref = \"rightclickharvest\" }\n</code></pre> build.gradle<pre><code>repositories {\n    // rest of repositories block...\n\n    maven {\n        name = \"Jamalam's Maven\"\n        url = \"https://maven.jamalam.tech/releases\"\n\n        content {\n            includeGroup \"io.github.jamalam360\"\n        }\n    }\n}\n\ndependencies {\n    // rest of dependencies block...\n\n    modImplementation libs.rightclickharvest\n    modRuntimeOnly libs.jamlib\n}\n</code></pre> Using Gradle PropertiesUsing Version Catalogues gradle.properties<pre><code># rest of properties file ...\n# find this at https://github.com/JamCoreModding/jamlib/releases\njamlib_version=1.0.1\n# find this at https://github.com/JamCoreModding/right-click-harvest/releases\nrightclickharvest_version=4.0.1\n</code></pre> build.gradle<pre><code>repositories {\n    // rest of repositories block...\n\n    maven {\n        name = \"Jamalam's Maven\"\n        url = \"https://maven.jamalam.tech/releases\"\n\n        content {\n            includeGroup \"io.github.jamalam360\"\n        }\n    }\n}\n\ndependencies {\n    // rest of dependencies block...\n\n    implementation fg.deobf(\"io.github.jamalam360:right-click-harvest-forge:${jamlib_version}\")\n    runtimeOnly fg.deobf(\"io.github.jamalam360:jamlib-forge:${jamlib_version}\")\n    // Dependency of JamLib. Forge requires that we specify this\n    forgeRuntimeLibrary \"blue.endless:jankson:1.2.3\"\n}\n</code></pre> Version Catalogue<pre><code>[versions]\n# rest of versions...\n# find this at https://github.com/JamCoreModding/jamlib/releases\njamlib = \"1.0.1\"\n# find this at https://github.com/JamCoreModding/right-click-harvest/releases\nrightclickharvest = \"4.0.1\"\n\n[libraries]\n# rest of libraries...\njamlib = { module = \"io.github.jamalam360:jamlib-forge\", version.ref = \"jamlib\" }\nrightclickharvest = { module = \"io.github.jamalam360:right-click-harvest-forge\", version.ref = \"rightclickharvest\" }\n</code></pre> build.gradle<pre><code>repositories {\n    // rest of repositories block...\n\n    maven {\n        name = \"Jamalam's Maven\"\n        url = \"https://maven.jamalam.tech/releases\"\n\n        content {\n            includeGroup \"io.github.jamalam360\"\n        }\n    }\n}\n\ndependencies {\n    // rest of dependencies block...\n\n    implementation fg.deobf(libs.rightclickharvest)\n    runtimeOnly fg.deobf(libs.jamlib)\n    // Dependency of JamLib. Forge requires that we specify this\n    forgeRuntimeLibrary \"blue.endless:jankson:1.2.3\"\n}\n</code></pre> <p>Once RightClickHarvest is successfully in your development environment, you can add a dependency on it to your mod metadata. You can also make this optional if you wish.</p> FabricQuiltForge fabric.mod.json<pre><code>{\n    // rest of JSON\n    \"depends\": {\n        // rest of depends\n        \"rightclickharvest\": \"&gt;=1.0.0\"\n    }\n}\n</code></pre> quilt.mod.json<pre><code>{\n    // rest of JSON\n    \"quilt_loader\": {\n        // rest of quilt_loader\n        \"depends\": [\n            // rest of depends\n            {\n                \"id\": \"rightclickharvest\",\n                \"version\": \"&gt;=1.0.0\"\n            }\n        ]\n    }\n}\n</code></pre> META-INF/mods.toml<pre><code>[[dependencies.YOUR_MOD_ID]]\nmodId = \"rightclickharvest\"\nmandatory = true\nversionRange = \"[1.0.0,)\"\nordering = \"AFTER\"\nside = \"BOTH\"\n</code></pre>"},{"location":"right-click-harvest/api/#events","title":"Events","text":"<p>Now that RightClickHarvest is added, you can use its events.</p>"},{"location":"right-click-harvest/api/#afterharvest","title":"AfterHarvest","text":"<p>This event is called after a successful harvest.</p> Fabric or QuiltForge Your Mod Initializer<pre><code>RightClickHarvestFabricLikeCallbacks.AFTER_HARVEST.register((ctx) -&gt; { ... });\n</code></pre> In an Event Subscribed Class<pre><code>@SubscribeEvent\npublic static void onAfterHarvest(RightClickHarvestForgeEvents.AfterHarvest ev) {\n    HarvestContext ctx = ev.getContext();\n    ...\n}\n</code></pre>"},{"location":"right-click-harvest/configuration/","title":"Configuring RightClickHarvest","text":"<p>The configuration file is located at <code>config/rightclickharvest.json5</code>. It can also be edited via the mod menu.</p> <p>If you are a modpack or mod author, you may be interested in the tags or API</p>"},{"location":"right-click-harvest/configuration/#config-options","title":"Config Options","text":"<ul> <li><code>requireHoe</code></li> <li>Whether to require the player holds a hoe to right-click-harvest a crop.</li> <li>Default: <code>true</code></li> <li>Options:<ul> <li><code>false</code></li> <li><code>true</code></li> </ul> </li> <li><code>harvestInRadius</code></li> <li>Whether to increase the radius of crops that are harvested if a higher tier hoe is used.</li> <li>Default: <code>true</code></li> <li>Options:<ul> <li><code>false</code></li> <li><code>true</code></li> </ul> </li> <li><code>hungerLevel</code></li> <li>The amount of hunger to use when harvesting crops, if any.</li> <li>Default: <code>NORMAL</code></li> <li>Options:<ul> <li><code>NONE</code></li> <li><code>LOW</code></li> <li><code>NORMAL</code></li> <li><code>HIGH</code></li> </ul> </li> </ul>"},{"location":"right-click-harvest/tags/","title":"Tags","text":""},{"location":"right-click-harvest/tags/#block-tags","title":"Block Tags","text":"<ul> <li><code>blacklist</code>: blocks that RightClickHarvest should completely ignore.</li> <li><code>radius_harvest_blacklist</code>: blocks that are ignored by the harvest in   radius feature (e.g. cocoa beans).</li> <li><code>hoe_never_required</code>: blocks that never require a hoe to be harvested,   even if <code>Config.requireHoe</code> is true (e.g. nether wart and cocoa beans).</li> </ul>"},{"location":"right-click-harvest/tags/#item-tags","title":"Item Tags","text":"<p>These tags are used to determine the radius when harvesting in a radius.</p> <ul> <li><code>low_tier_hoes</code>: hoes that are equivalent to iron hoes.</li> <li><code>mid_tier_hoes</code>: hoes that are equivalent to diamond and gold hoes.</li> <li><code>high_tier_hoes</code>: hoes that are equivalent to Netherite hoes.</li> </ul> <p>If a hoe is not included in any of these tags, it will be considered to be equivalent to a wooden hoe.</p>"},{"location":"sort-it-out/customizing-sort-buttons/","title":"Customizing Sort Buttons","text":"<p>Sort It Out! has a resource-pack driven system for modifying where sort buttons are displayed for different screens.</p> <p>By default, Sort It Out! provides definitions for vanilla containers, and some modded containers. If no definition is present for a screen, the mod attempts to add a default position button for sorting the player inventory.</p>"},{"location":"sort-it-out/customizing-sort-buttons/#adding-a-custom-definition","title":"Adding a Custom Definition","text":"<p>If you are adding a definition, please consider contributing it to Sort It Out! directly or suggesting it on the GitHub page. This guide assumes a basic familiarity with creating resource packs, and with using Linkie. If you are unfamiliar with either, please ask on the Discord or the GitHub page.</p> <p>Sort button defitions are split into two parts: the type predicate, which defines what screen the definition applies to, and the button definitions, which defines where sort buttons should appear and what inventories they should sort.</p> <p>First, create a resource (not data) pack and add the file <code>&lt;your resource pack namespace&gt;/sort_buttons/&lt;arbritrary name for your sort button definition&gt;.json</code>.</p> <p>Open Minecraft and run <code>/sortitoutc toggle_slot_index_debug_renderer</code>, then open the container/screen you want to add sort buttons to. This shows the index of each slot, along with a class name for the screen (starting <code>net.minecraft.</code>) and a resource location (like <code>minecraft:inventory</code>, or <code>null</code>). If the resource location is <code>null</code>, the type predicate will need to refer to the screen by class. To do this, you need to know the fully-qualified mojmap and intermediary names for the screen. Use Linkie for this (this tutorial is not a Linkie guide, however).</p> <p>The JSON file should then be filled in like so:</p> <pre><code>{\n    // If the resource location was not null, use the following:\n    \"type\": \"&lt;resource location&gt;\",\n    // Otherwise, use this `type`:\n    \"type\": {\n        \"mojmap\": \"&lt;mojmap class name&gt;\",\n        \"intermediary\": \"&lt;intermediary class name&gt;\"\n    },\n    // Then, add your sort button definitions\n    \"sortButtons\": [\n        {\n            \"xOffset\": 12, // x offset from the left-hand side of the screen\n            \"yOffset\": 10, // y offset from the top of the screen (positive down)\n            \"slotStartIndex\": 0 // an index of any slot in the inventory section that this button should sort.\n        },\n        // repeat as many times as you like to add more sort buttons\n    ]\n}\n</code></pre> <p>To remove the default sort buttons for a screen, just set <code>sortButtons</code> to an empty array (<code>[]</code>).</p>"},{"location":"totally-balanced-bone-drops/about/","title":"Introduction to Totally Balanced Bone Drops","text":"<p>If most entities have skeletons, surely they should drop bones?</p> <p>This mod adds bone drops to all entities, apart from those in its blacklist. There are clearly no balance issues with this mod whatsoever.</p>"},{"location":"totally-balanced-bone-drops/configuration/","title":"Configuring Totally Balanced Bone Drops","text":"<p>For an introduction to Totally Balanced Bone Drops, see the About page.</p>"},{"location":"totally-balanced-bone-drops/configuration/#for-players","title":"For Players","text":"<p>If you are a player, you can configure TBBD via the configuration file. The configuration file is located at <code>config/tb-bone-drops.json</code>. It can also be edited via Mod Menu.</p>"},{"location":"totally-balanced-bone-drops/configuration/#config-options","title":"Config Options","text":"<ul> <li><code>chance</code></li> <li>The chance that a bone will drop from an entity.</li> <li>Default: <code>COMMON</code></li> <li>Options:<ul> <li><code>VERY_RARE</code></li> <li><code>RARE</code></li> <li><code>COMMON</code></li> <li><code>VERY_COMMON</code></li> <li><code>ABUNDANT</code></li> </ul> </li> </ul>"},{"location":"totally-balanced-bone-drops/configuration/#for-developers-or-advanced-players","title":"For Developers, or Advanced Players","text":"<p>TBBD operates on a blacklist system. If a <code>LivingEntity</code> is not in the blacklist, it will drop a bone. The blacklist is in the form of an entity tag, located at <code>data/tb-bone-drops/tags/entity_type/blacklist.json</code>. You can use this to blacklist entities from dropping bones. </p>"},{"location":"totally-balanced-bone-drops/configuration/#default-entries","title":"Default Entries","text":"<pre><code>{\n  \"replace\": false,\n  \"values\": [\n    \"minecraft:allay\",\n    \"minecraft:armor_stand\",\n    \"minecraft:bee\",\n    \"minecraft:blaze\",\n    \"minecraft:cave_spider\",\n    \"minecraft:creeper\",\n    \"minecraft:elder_guardian\",\n    \"minecraft:ender_dragon\",\n    \"minecraft:endermite\",\n    \"minecraft:ghast\",\n    \"minecraft:guardian\",\n    \"minecraft:iron_golem\",\n    \"minecraft:magma_cube\",\n    \"minecraft:pufferfish\",\n    \"minecraft:salmon\",\n    \"minecraft:shulker\",\n    \"minecraft:silverfish\",\n    \"minecraft:slime\",\n    \"minecraft:snow_golem\",\n    \"minecraft:spider\",\n    \"minecraft:tadpole\",\n    \"minecraft:tropical_fish\",\n    \"minecraft:vex\",\n    \"minecraft:wither\",\n    \"minecraft:wither_skeleton\"\n  ]\n}\n</code></pre>"},{"location":"utility-belt/about/","title":"Introduction to Utility Belt","text":"<p>Free your hotbar.</p> <p>This mod adds a belt that can be used as an auxiliary hotbar to store your tools! The belt can hold up to 4 tools (in the future it may be upgradeable).</p>"},{"location":"utility-belt/configuration/","title":"Configuring Utility Belt","text":"<p>For an introduction to Utility Belt, see the About page.</p>"},{"location":"utility-belt/configuration/#for-players","title":"For Players","text":"<p>If you are a player, you can configure Utility Belt via the configuration file. The configuration file is located at <code>config/utility_belt.json5</code>. It can also be edited via Mod Menu or the (Neo)Forge config screen.</p> <p>Available options are documented in comments or tooltips.</p>"},{"location":"utility-belt/configuration/#for-developers-or-pack-makers","title":"For Developers, or Pack Makers","text":"<p>Utility Belt contains an item tag, <code>utility_belt:allowed_in_utility_belt</code>. The utility belt accepts several items by Java class (namely <code>TieredItem</code>, <code>Brush</code>, etc.), as well as those in this tag. If you want to add an item to the utility belt, add it to this tag (<code>/data/utility_belt/tags/item/allowed_in_utility_belt.json</code>).</p>"}]}